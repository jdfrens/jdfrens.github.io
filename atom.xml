<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming During Recess]]></title>
  <link href="http://jdfrens.github.io/atom.xml" rel="self"/>
  <link href="http://jdfrens.github.io/"/>
  <updated>2013-08-03T20:42:23-05:00</updated>
  <id>http://jdfrens.github.io/</id>
  <author>
    <name><![CDATA[Jeremy D. Frens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Even Better Enumeration Processing]]></title>
    <link href="http://jdfrens.github.io/blog/2013/08/03/ignore-me/"/>
    <updated>2013-08-03T17:26:00-05:00</updated>
    <id>http://jdfrens.github.io/blog/2013/08/03/ignore-me</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jdfrens.blogspot.com/2013/03/filter-first.html">previous blog post</a> I talked about filtering your data before transforming it.  I ended with this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span>
</span><span class='line'>  <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While I prefer this much more than the code I started with (read <a href="http://jdfrens.blogspot.com/2013/03/filter-first.html">that previous post</a> for the reasons why), it can be improved by abstracting it some more.</p>

<p>Let&#39;s at least use a parameter for the source enumeration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">values</span><span class="o">.</span>
</span><span class='line'>  <span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span>
</span><span class='line'>  <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">process</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That computes the same results, but we hate top-level methods like this.  If I were being really careful, I&#39;d refactor the method into a class method with a parameter, but I&#39;m going to take it to the following step where <code>values</code> becomes an instance variable and <code>process</code> is an instance method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyProcessor</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:values</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span>
</span><span class='line'>      <span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span>
</span><span class='line'>      <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">MyProcessor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">process</span>
</span></code></pre></td></tr></table></div></figure>


<p>That still computes the same thing.  Now I&#39;m going to extract a few methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyProcessor</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:values</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span>
</span><span class='line'>    <span class="n">add_1_to_non_multiples_of_4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_1_to_non_multiples_of_4</span>
</span><span class='line'>    <span class="n">filter_out_multiples_of_4</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filter_out_multiples_of_4</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">MyProcessor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">process</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though my example is terribly contrived and I&#39;m pushing the bounds of good taste by sticking with it, this code is easier to reason about and to unit test.  In particular, it&#39;s much easier to test edge cases with this code.</p>
]]></content>
  </entry>
  
</feed>
